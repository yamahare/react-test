{"version":3,"sources":["components/Header.tsx","components/Movie.tsx","components/Search.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Title","width","src","alt","Year","Search","useState","searchValue","setSeachValue","value","onChange","e","currentTarget","type","onClick","preventDefault","search","App","loading","setLoading","movies","setMovies","useEffect","fetch","then","response","json","jsonResponse","Response","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kPAceA,G,MARiB,SAAAC,GAC9B,OACE,4BAAQC,UAAU,cAChB,4BAAKD,EAAME,SCkBFC,EAdqB,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAC9BC,EAA0B,QAAjBD,EAAME,OAZW,qGAYoCF,EAAME,OAE1E,OACE,yBAAKL,UAAU,SACb,4BAAKG,EAAMG,OACX,6BACE,yBAAKC,MAAM,MAAMC,IAAKJ,EAAQK,IAAG,4BAAuBN,EAAMG,UAEhE,+BAAKH,EAAMO,KAAX,OCaSC,EA7BiB,SAAAZ,GAAU,IAAD,EACFa,mBAAS,IADP,mBAChCC,EADgC,KACnBC,EADmB,KAiBvC,OACE,0BAAMd,UAAU,UACd,2BACEe,MAAOF,EACPG,SAlB2B,SAACC,GAChCH,EAAcG,EAAEC,cAAcH,QAkB1BI,KAAK,SAEP,2BAAOC,QAbgB,SAACH,GAC1BA,EAAEI,iBACFtB,EAAMuB,OAAOT,GALbC,EAAc,KAgBwBK,KAAK,SAASJ,MAAM,mBCyB/CQ,EA/CO,WAAO,IAAD,EACIX,oBAAS,GADb,mBACnBY,EADmB,KACVC,EADU,OAEEb,mBAAS,IAFX,mBAEnBc,EAFmB,KAEXC,EAFW,KAI1BC,qBAAU,WACRC,MAPkB,kDAQfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFN,EAAUM,EAAatB,QACvBc,GAAW,QAGjB,IAiBF,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CAAQC,KAAK,wCACb,kBAAC,EAAD,CAAQqB,OAlBG,SAACT,GACdY,GAAW,GAEXI,MAAM,8BAAD,OAA+BhB,EAA/B,qBACFiB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACyB,SAA1BA,EAAaC,UACdP,EAAUM,EAAatB,QACvBc,GAAW,IAEXA,GAAW,SASf,uBAAGzB,UAAU,aAAb,uJACA,yBAAKA,UAAU,UACZwB,EACC,4CAEAE,EAAOS,KAAI,SAAChC,EAAkBiC,GAC5B,OAAO,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAcjC,EAAMG,OAASH,MAAOA,UCnC7CmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.dbf9c7ae.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  text: string;\n};\n\nconst Header: React.FC<Props> = props => {\n  return (\n    <header className=\"App-header\">\n      <h2>{props.text}</h2>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nconst DEFAULT_PLACEHOLDER_IMAGE = \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\n\nexport type MovieType = {\n  Poster: string,\n  Title: string,\n  Year: Number\n}\ntype MovieProps = {\n  movie: MovieType;\n}\n\nconst Movie: React.FC<MovieProps> = ({movie}) => {\n  const poster = movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n\n  return (\n    <div className=\"movie\">\n      <h2>{movie.Title}</h2>\n      <div>\n        <img width=\"200\" src={poster} alt={`the movie titled: ${movie.Title}`}/>\n      </div>\n      <p>({movie.Year})</p>\n    </div>\n  );\n}\n\nexport default Movie;\n","import React, { useState } from 'react';\n\ntype Props = {\n  search: (searchValue: string) => void;\n};\n\nconst Search: React.FC<Props> = props => {\n  const [searchValue, setSeachValue] = useState(\"\");\n\n  const handleSearchInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\n    setSeachValue(e.currentTarget.value)\n  }\n\n  const resetInputField = () => {\n    setSeachValue(\"\");\n  }\n\n  const callSearchFunction = (e: React.FormEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    props.search(searchValue);\n    resetInputField();\n  }\n\n  return (\n    <form className=\"search\">\n      <input\n        value={searchValue}\n        onChange={handleSearchInputChanges}\n        type=\"text\"\n      />\n      <input onClick={callSearchFunction} type=\"submit\" value=\"検索\" />\n    </form>\n  )\n}\n\nexport default Search;","import \"./App.css\";\nimport React, { useState, useEffect } from 'react';\nimport Header from \"./Header\";\nimport Movie, {MovieType} from \"./Movie\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n\n  useEffect(()=>{\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n          setMovies(jsonResponse.Search)\n          setLoading(false);\n\n      });\n  },[])\n\n  const search = (searchValue: string): void => {\n    setLoading(true);\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if(jsonResponse.Response === \"True\"){\n          setMovies(jsonResponse.Search)\n          setLoading(false);\n        } else{\n          setLoading(false);\n        }\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <Header text=\"映画検索 React Hook\" />\n      <Search search={search} />\n      <p className=\"App-intro\">好みの映画を検索しましょうc(`Д´と⌒ｃ)つ彡 英語推奨</p>\n      <div className=\"movies\">\n        {loading ? (\n          <span>loading...</span>\n        ) : (\n          movies.map((movie: MovieType, index) => {\n            return <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}